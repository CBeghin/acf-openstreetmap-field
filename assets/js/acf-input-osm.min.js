!function(t,e){var i=e.options,a={};a.feature=wp.media.View.extend({template:_.template('<div tabindex="<%= data.i %>" class="osm-result"><%= data.result_text %><br /><small><%= data.properties.osm_value %></small></div>'),initialize:function(t){console.log(arguments),console.log(this,this.$el)},render:function(){return wp.media.View.prototpe.render.apply(this,arguments)}}),a.field=Backbone.View.extend({map:null,visible:null,events:{},$parent:function(){return this.$el.closest(".acf-field-settings,.acf-field-open-street-map")},$zoom:function(){return this.$parent().find('input[id$="-zoom"]')},$lat:function(){return this.$parent().find('input[id$="-center_lat"]')},$lng:function(){return this.$parent().find('input[id$="-center_lng"]')},$layerStore:function(){return this.$parent().find('input[id$="-leaflet_layers"]')},$address:function(){return this.$parent().find('input[id$="-address"]')},$mlat:function(){return this.$parent().find('input[id$="-marker_lat"]')},$mlng:function(){return this.$parent().find('input[id$="-marker_lng"]')},$results:function(){return this.$parent().find(".osm-results")},initialize:function(t){this.map=t.map,this.update_map(),this.init_layers(),this.init_marker(),this.init_acf(),this.update_visible()},init_marker:function(){var t=this;this.icon=L.divIcon({className:"osm-marker",html:"",iconSize:0}),this.marker=L.marker([this.$mlat().val(),this.$mlng().val()],{icon:this.icon,draggable:!0,title:this.$address().val()||""}).addTo(this.map),this.map.on("click",function(e){t.map_clicked.apply(t,[e])})},map_clicked:function(t){t.latlng;this.set_marker(t.latlng)},set_marker:function(e){t(this.marker._icon).attr("title",this.marker.title),this.marker.setLatLng(e),this.$mlat().val(e.lat),this.$mlng().val(e.lng)},init_layers:function(){var e,a=this,n={},s={},r=function(t,e){var i;return!!(e.options.opacity&&e.options.opacity<1)||(i=["^(OpenWeatherMap|OpenSeaMap)","OpenMapSurfer.AdminBounds","Stamen.Toner(Hybrid|Lines|Labels)","Acetate.(foreground|labels|roads)","HillShading","Hydda.RoadsAndLabels","^JusticeMap","OpenInfraMap.(Power|Telecom|Petroleum|Water)","OpenPtMap","OpenRailwayMap","OpenFireMap","SafeCast","CartoDB.DarkMatterOnlyLabels","CartoDB.PositronOnlyLabels"],null!==t.match("("+i.join("|")+")"))},o=function(l,u){var d,p;if(_.isObject(u))return t.each(u,o);p=i.layer_config[l.split(".")[0]]||{options:{}},d=L.tileLayer.provider(l,p.options),d.providerKey=l,r(l,d)?s[l]=d:n[l]=d,-1!==e.indexOf(l)&&a.map.addLayer(d)};e=this.$el.data().mapLayers,this.map.eachLayer(function(t){a.map.removeLayer(t)}),t.each(i.providers,o),this.$layerStore().length&&(this.layersControl=L.control.layers(n,s,{collapsed:!0,hideSingleBase:!0}).addTo(this.map))},update_visible:function(){return this.visible===this.$el.is(":visible")?this:(this.visible=this.$el.is(":visible"),this.visible?(this.map.invalidateSize(),this.bind_events(),this):(this.unbind_events(),this))},init_acf:function(){var e=this,i=function(){e.update_visible()};acf.addAction("show",i),acf.addAction("hide",i),t(document).on("postbox-toggled",i),this.map.on("zoomend",function(t){e.map_zoomed.apply(e,[t])}),this.map.on("moveend",function(t){e.map_moved.apply(e,[t])}),this.map.on("baselayerchange overlayadd overlayremove layeradd layerremove",function(t){var i=[];e.map.eachLayer(function(t){i.push(t.providerKey)}),e.$layerStore().val(JSON.stringify(i))})},unbind_events:function(){var t=this;t.$lat().off("blur"),t.$lng().off("blur"),t.$zoom().off("blur"),t.$zoom().off("keyup focus")},bind_events:function(){var t=this;t.$lat().on("blur",function(e){t.update_map()}),t.$lng().on("blur",function(e){t.update_map()}),t.$zoom().on("blur",function(e){t.update_map()}),t.$address().on("keyup focus",function(e){t.search(e)})},update_map:function(){var t=L.latLng(this.$lat().val(),this.$lng().val());this.map.setView(t,this.$zoom().val())},map_moved:function(t){var e=this.map.getCenter();this.$lat().val(e.lat),this.$lng().val(e.lng)},map_zoomed:function(t){this.$zoom().val(this.map.getZoom())},search:function(t){var e=this,i={};return void 0!==this._wait_address&&(clearTimeout(this._wait_address),delete this._wait_address),this.clear_results(),"keyup"==t.type&&27==t.originalEvent.keyCode?(t.preventDefault(),this.$results().html(""),this.$address().blur(),!1):""===this.$address().val()?void(this.marker.title=""):void(this._wait_address=setTimeout(function(){i={q:e.$address().val(),limit:5,lon:e.$lng().val(),lat:e.$lat().val()},e.ajax_get("https://photon.komoot.de/api/",i,function(t){e.build_results(t),delete this._wait_address})},666))},select_result:function(t){var e=L.latLng(t.coord[1],t.coord[0]);t.ext?this.map.fitBounds(L.latLngBounds(L.latLng(t.ext[1],t.ext[0]),L.latLng(t.ext[3],t.ext[2]))):this.map.setView(e,this.map.getZoom()),this.$address().val(t.text),this.clear_results(),this.marker.title=t.text,this.set_marker(e)},build_results:function(e){var i=this,a=e.features.length,n=this.$address().val(),s=e.features;this.clear_results(),a&&t.each(s,function(e,a){var s=i.format_result(a),r=s.replace(new RegExp("("+n.split(/[^a-z0-9]/).join("|")+")","gi"),"<strong>$1</strong>");r+="<br /><small>("+i.nice_words(a.properties.osm_value)+")</small>",t('<div tabindex="'+e+'" class="osm-result"></div>').html(r).appendTo(i.$results()).on("click",function(t){i.select_result({text:s,bounds:a.properties.extent,coord:a.geometry.coordinates})})})},clear_results:function(){this.$results().html("")},format_result:function(t){return this.get_result_words(t).join(", ")},get_result_words:function(e){var i=[],a=["name","street","housenumber","city","postcode","state","country"];return t.each(a,function(t,a){try{e.properties[a]&&i.push(e.properties[a])}catch(t){}}),Array.from(new Set(i))},nice_words:function(t){return t.split(/[\s_]/).map(function(t){return t[0].toUpperCase()+t.substring(1)}).join(" ")},ajax_get:function(e,i,a){var n=this;t.ajax({url:e,method:"get",data:i,success:function(t){"function"==typeof a&&a.apply(n,[t])}})}}),t(document).on("render-map",function(t,e){new a.field({el:t.target,map:e})})}(jQuery,acf_osm_admin);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
