!function(e,t){var n=t.options,i={};i.MarkerList=Backbone.View.extend({}),i.MarkerEntry=Backbone.View.extend({tagName:"div",className:"osm-marker",events:{'click [data-name="locate-marker"]':"locate_marker",'click [data-name="remove-marker"]':"remove_marker"},initialize:function(e){return this.template=e.template,this.marker=e.marker,this},render:function(){return this.$el.html(this.template(this)),this.update_marker(),this},update_marker:function(){return this.$el.find('[id$="-marker-lat"]').val(this.marker.getLatLng().lat),this.$el.find('[id$="-marker-lng"]').val(this.marker.getLatLng().lng),this.$el.find('[id$="-marker-label"]').val(this.marker.options.title),this},locate_marker:function(){return this.marker._map.flyTo(this.marker.getLatLng()),e(this.marker._icon).focus(),this},remove_marker:function(e){return e.preventDefault(),this.marker.remove(),this}}),i.field=Backbone.View.extend({map:null,geocoder:null,visible:null,events:{},$parent:function(){return this.$el.closest(".acf-field-settings,.acf-field-open-street-map")},$zoom:function(){return this.$parent().find('input[id$="-zoom"]')},$lat:function(){return this.$parent().find('input[id$="-center_lat"]')},$lng:function(){return this.$parent().find('input[id$="-center_lng"]')},$layerStore:function(){return this.$parent().find('input[id$="-leaflet_layers"]')},$results:function(){return this.$parent().find(".osm-results")},$markers:function(){return this.$parent().find(".osm-markers")},initialize:function(e){return this.map=e.map,this.update_map(),this.init_layers(),this.init_markers(),this.init_acf(),this.update_visible(),this},_get_geocoder_result_label:function(t,n){var i=!1;return t.length?e.each(t,function(e,t){return i=t.html?t.html:t.name,!1}):i=n.lat.toString()+", "+n.lng.toString(),e(i).text().replace(/^(\s+)/g,"").replace(/(\s+)$/g,"")},init_markers:function(){var t=this;this.icon=new L.DivIcon({html:"",className:"osm-marker-icon"}),this.init_geocode(),this.map.on("click",function(e){var n=e.latlng;t.geocoder.options.geocoder.reverse(e.latlng,t.map.getZoom(),function(e){var i=t._get_geocoder_result_label(e,n);t.add_marker(n,i)},t)}),this.map.on("layeradd",function(n){if(n.layer.constructor===L.Marker){var a=t.$markers().find('[data-id="__osm_marker_template__"]').html().split("__osm_marker_template__").join("<%= id %>"),r=new i.MarkerEntry({controller:this,marker:n.layer,id:acf.uniqid(),template:_.template(a)});r.render().$el.prependTo(t.$markers()),n.layer.setIcon(t.icon).on("click",function(e){this.remove()}).on("remove",function(e){r.$el.remove()}).on("dragend",function(n){t.geocoder.options.geocoder.reverse(this.getLatLng(),t.map.getZoom(),function(n){var i=t._get_geocoder_result_label(n,this.getLatLng());this.unbindTooltip(),this.bindTooltip(i),this.options.title=i,e(this._icon).attr("title",i),r.update_marker()},this)}).dragging.enable()}})},add_marker:function(e,t){L.marker(e,{title:t,icon:this.icon}).bindTooltip(t).addTo(this.map)},init_layers:function(){var t,i=this,a={},r={},o=function(e,t){var n;return!!(t.options.opacity&&t.options.opacity<1)||(n=["^(OpenWeatherMap|OpenSeaMap)","OpenMapSurfer.AdminBounds","Stamen.Toner(Hybrid|Lines|Labels)","Acetate.(foreground|labels|roads)","HillShading","Hydda.RoadsAndLabels","^JusticeMap","OpenInfraMap.(Power|Telecom|Petroleum|Water)","OpenPtMap","OpenRailwayMap","OpenFireMap","SafeCast","CartoDB.DarkMatterOnlyLabels","CartoDB.PositronOnlyLabels"],null!==e.match("("+n.join("|")+")"))},s=function(e){return null===e},l=function(c,d){var m,u;if(_.isObject(d))return e.each(d,l);s(c)||(u=n.layer_config[c.split(".")[0]]||{options:{}},m=L.tileLayer.provider(c,u.options),m.providerKey=c,o(c,m)?r[c]=m:a[c]=m,-1!==t.indexOf(c)&&i.map.addLayer(m))};t=this.$el.data().mapLayers,this.map.eachLayer(function(e){e.constructor!==L.Marker&&i.map.removeLayer(e)}),e.each(n.providers,l),this.$layerStore().length&&(this.layersControl=L.control.layers(a,r,{collapsed:!0,hideSingleBase:!0}).addTo(this.map))},init_geocode:function(){var t=this;this.map._controlCorners.above=e('<div class="acf-osm-above"></div>').insertBefore(this.$el).get(0),this.geocoder=L.Control.geocoder({collapsed:!1,position:"above",placeholder:"Search...",errorMessage:"Nothing found...",showResultIcons:!0,suggestMinLength:3,suggestTimeout:250,queryMinLength:3,defaultMarkGeocode:!1}).on("markgeocode",function(e){var n=t._get_geocoder_result_label([e.geocode],e.geocode.center);t.add_marker(e.geocode.center,n),t.map.fitBounds(e.geocode.bbox)}).addTo(this.map),L.DomEvent.addListener(this.geocoder._input,"keydown",function(e){13===e.keyCode&&e.preventDefault()},this.geocoder)},update_visible:function(){return this.visible===this.$el.is(":visible")?this:(this.visible=this.$el.is(":visible"),this.visible?(this.map.invalidateSize(),this.bind_events(),this):(this.unbind_events(),this))},init_acf:function(){var t=this,n=function(){t.update_visible()};acf.addAction("show",n),acf.addAction("hide",n),e(document).on("postbox-toggled",n),this.map.on("zoomend",function(e){t.map_zoomed.apply(t,[e])}),this.map.on("moveend",function(e){t.map_moved.apply(t,[e])}),this.map.on("baselayerchange overlayadd overlayremove layeradd layerremove",function(e){var n=[];t.map.eachLayer(function(e){n.push(e.providerKey)}),t.$layerStore().val(JSON.stringify(n))})},unbind_events:function(){var e=this;e.$lat().off("blur"),e.$lng().off("blur"),e.$zoom().off("blur"),e.$zoom().off("keyup focus")},bind_events:function(){var e=this;e.$lat().on("blur",function(t){e.update_map()}),e.$lng().on("blur",function(t){e.update_map()}),e.$zoom().on("blur",function(t){e.update_map()})},update_map:function(){if(this.$lat().val()&&this.$lng().val()){var e=L.latLng(this.$lat().val(),this.$lng().val());this.map.setView(e,this.$zoom().val())}},map_moved:function(e){var t=this.map.getCenter();this.$lat().val(t.lat),this.$lng().val(t.lng)},map_zoomed:function(e){this.$zoom().val(this.map.getZoom())}}),e(document).on("pre-render-map",function(e,t){new i.field({el:e.target,map:t})})}(jQuery,acf_osm_admin);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
